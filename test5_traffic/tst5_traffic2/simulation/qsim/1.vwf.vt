// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/16/2022 15:25:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    traffic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traffic_vlg_sample_tst(
	clk_1s,
	clk_2s,
	clk_ms,
	RST,
	sampler_tx
);
input  clk_1s;
input  clk_2s;
input  clk_ms;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(clk_1s or clk_2s or clk_ms or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module traffic_vlg_check_tst (
	G1,
	G2,
	LED8s,
	LED_display,
	R1,
	R2,
	SEL,
	Y1,
	Y2,
	sampler_rx
);
input  G1;
input  G2;
input [7:0] LED8s;
input [3:0] LED_display;
input  R1;
input  R2;
input [2:0] SEL;
input  Y1;
input  Y2;
input sampler_rx;

reg  G1_expected;
reg  G2_expected;
reg [7:0] LED8s_expected;
reg [3:0] LED_display_expected;
reg  R1_expected;
reg  R2_expected;
reg [2:0] SEL_expected;
reg  Y1_expected;
reg  Y2_expected;

reg  G1_prev;
reg  G2_prev;
reg [7:0] LED8s_prev;
reg [3:0] LED_display_prev;
reg  R1_prev;
reg  R2_prev;
reg [2:0] SEL_prev;
reg  Y1_prev;
reg  Y2_prev;

reg  G1_expected_prev;
reg  G2_expected_prev;
reg [7:0] LED8s_expected_prev;
reg [3:0] LED_display_expected_prev;
reg  R1_expected_prev;
reg  R2_expected_prev;
reg [2:0] SEL_expected_prev;
reg  Y1_expected_prev;
reg  Y2_expected_prev;

reg  last_G1_exp;
reg  last_G2_exp;
reg [7:0] last_LED8s_exp;
reg [3:0] last_LED_display_exp;
reg  last_R1_exp;
reg  last_R2_exp;
reg [2:0] last_SEL_exp;
reg  last_Y1_exp;
reg  last_Y2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	G1_prev = G1;
	G2_prev = G2;
	LED8s_prev = LED8s;
	LED_display_prev = LED_display;
	R1_prev = R1;
	R2_prev = R2;
	SEL_prev = SEL;
	Y1_prev = Y1;
	Y2_prev = Y2;
end

// update expected /o prevs

always @(trigger)
begin
	G1_expected_prev = G1_expected;
	G2_expected_prev = G2_expected;
	LED8s_expected_prev = LED8s_expected;
	LED_display_expected_prev = LED_display_expected;
	R1_expected_prev = R1_expected;
	R2_expected_prev = R2_expected;
	SEL_expected_prev = SEL_expected;
	Y1_expected_prev = Y1_expected;
	Y2_expected_prev = Y2_expected;
end



// expected G1
initial
begin
	G1_expected = 1'bX;
end 

// expected Y1
initial
begin
	Y1_expected = 1'bX;
end 

// expected R1
initial
begin
	R1_expected = 1'bX;
end 

// expected G2
initial
begin
	G2_expected = 1'bX;
end 

// expected Y2
initial
begin
	Y2_expected = 1'bX;
end 

// expected R2
initial
begin
	R2_expected = 1'bX;
end 
// expected SEL[ 2 ]
initial
begin
	SEL_expected[2] = 1'bX;
end 
// expected SEL[ 1 ]
initial
begin
	SEL_expected[1] = 1'bX;
end 
// expected SEL[ 0 ]
initial
begin
	SEL_expected[0] = 1'bX;
end 
// expected LED8s[ 7 ]
initial
begin
	LED8s_expected[7] = 1'bX;
end 
// expected LED8s[ 6 ]
initial
begin
	LED8s_expected[6] = 1'bX;
end 
// expected LED8s[ 5 ]
initial
begin
	LED8s_expected[5] = 1'bX;
end 
// expected LED8s[ 4 ]
initial
begin
	LED8s_expected[4] = 1'bX;
end 
// expected LED8s[ 3 ]
initial
begin
	LED8s_expected[3] = 1'bX;
end 
// expected LED8s[ 2 ]
initial
begin
	LED8s_expected[2] = 1'bX;
end 
// expected LED8s[ 1 ]
initial
begin
	LED8s_expected[1] = 1'bX;
end 
// expected LED8s[ 0 ]
initial
begin
	LED8s_expected[0] = 1'bX;
end 
// expected LED_display[ 3 ]
initial
begin
	LED_display_expected[3] = 1'bX;
end 
// expected LED_display[ 2 ]
initial
begin
	LED_display_expected[2] = 1'bX;
end 
// expected LED_display[ 1 ]
initial
begin
	LED_display_expected[1] = 1'bX;
end 
// expected LED_display[ 0 ]
initial
begin
	LED_display_expected[0] = 1'bX;
end 
// generate trigger
always @(G1_expected or G1 or G2_expected or G2 or LED8s_expected or LED8s or LED_display_expected or LED_display or R1_expected or R1 or R2_expected or R2 or SEL_expected or SEL or Y1_expected or Y1 or Y2_expected or Y2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected G1 = %b | expected G2 = %b | expected LED8s = %b | expected LED_display = %b | expected R1 = %b | expected R2 = %b | expected SEL = %b | expected Y1 = %b | expected Y2 = %b | ",G1_expected_prev,G2_expected_prev,LED8s_expected_prev,LED_display_expected_prev,R1_expected_prev,R2_expected_prev,SEL_expected_prev,Y1_expected_prev,Y2_expected_prev);
	$display("| real G1 = %b | real G2 = %b | real LED8s = %b | real LED_display = %b | real R1 = %b | real R2 = %b | real SEL = %b | real Y1 = %b | real Y2 = %b | ",G1_prev,G2_prev,LED8s_prev,LED_display_prev,R1_prev,R2_prev,SEL_prev,Y1_prev,Y2_prev);
`endif
	if (
		( G1_expected_prev !== 1'bx ) && ( G1_prev !== G1_expected_prev )
		&& ((G1_expected_prev !== last_G1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G1_expected_prev);
		$display ("     Real value = %b", G1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G1_exp = G1_expected_prev;
	end
	if (
		( G2_expected_prev !== 1'bx ) && ( G2_prev !== G2_expected_prev )
		&& ((G2_expected_prev !== last_G2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G2_expected_prev);
		$display ("     Real value = %b", G2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G2_exp = G2_expected_prev;
	end
	if (
		( LED8s_expected_prev[0] !== 1'bx ) && ( LED8s_prev[0] !== LED8s_expected_prev[0] )
		&& ((LED8s_expected_prev[0] !== last_LED8s_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[0] = LED8s_expected_prev[0];
	end
	if (
		( LED8s_expected_prev[1] !== 1'bx ) && ( LED8s_prev[1] !== LED8s_expected_prev[1] )
		&& ((LED8s_expected_prev[1] !== last_LED8s_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[1] = LED8s_expected_prev[1];
	end
	if (
		( LED8s_expected_prev[2] !== 1'bx ) && ( LED8s_prev[2] !== LED8s_expected_prev[2] )
		&& ((LED8s_expected_prev[2] !== last_LED8s_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[2] = LED8s_expected_prev[2];
	end
	if (
		( LED8s_expected_prev[3] !== 1'bx ) && ( LED8s_prev[3] !== LED8s_expected_prev[3] )
		&& ((LED8s_expected_prev[3] !== last_LED8s_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[3] = LED8s_expected_prev[3];
	end
	if (
		( LED8s_expected_prev[4] !== 1'bx ) && ( LED8s_prev[4] !== LED8s_expected_prev[4] )
		&& ((LED8s_expected_prev[4] !== last_LED8s_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[4] = LED8s_expected_prev[4];
	end
	if (
		( LED8s_expected_prev[5] !== 1'bx ) && ( LED8s_prev[5] !== LED8s_expected_prev[5] )
		&& ((LED8s_expected_prev[5] !== last_LED8s_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[5] = LED8s_expected_prev[5];
	end
	if (
		( LED8s_expected_prev[6] !== 1'bx ) && ( LED8s_prev[6] !== LED8s_expected_prev[6] )
		&& ((LED8s_expected_prev[6] !== last_LED8s_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[6] = LED8s_expected_prev[6];
	end
	if (
		( LED8s_expected_prev[7] !== 1'bx ) && ( LED8s_prev[7] !== LED8s_expected_prev[7] )
		&& ((LED8s_expected_prev[7] !== last_LED8s_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[7] = LED8s_expected_prev[7];
	end
	if (
		( LED_display_expected_prev[0] !== 1'bx ) && ( LED_display_prev[0] !== LED_display_expected_prev[0] )
		&& ((LED_display_expected_prev[0] !== last_LED_display_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_display[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_display_expected_prev);
		$display ("     Real value = %b", LED_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED_display_exp[0] = LED_display_expected_prev[0];
	end
	if (
		( LED_display_expected_prev[1] !== 1'bx ) && ( LED_display_prev[1] !== LED_display_expected_prev[1] )
		&& ((LED_display_expected_prev[1] !== last_LED_display_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_display[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_display_expected_prev);
		$display ("     Real value = %b", LED_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED_display_exp[1] = LED_display_expected_prev[1];
	end
	if (
		( LED_display_expected_prev[2] !== 1'bx ) && ( LED_display_prev[2] !== LED_display_expected_prev[2] )
		&& ((LED_display_expected_prev[2] !== last_LED_display_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_display[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_display_expected_prev);
		$display ("     Real value = %b", LED_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED_display_exp[2] = LED_display_expected_prev[2];
	end
	if (
		( LED_display_expected_prev[3] !== 1'bx ) && ( LED_display_prev[3] !== LED_display_expected_prev[3] )
		&& ((LED_display_expected_prev[3] !== last_LED_display_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_display[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_display_expected_prev);
		$display ("     Real value = %b", LED_display_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED_display_exp[3] = LED_display_expected_prev[3];
	end
	if (
		( R1_expected_prev !== 1'bx ) && ( R1_prev !== R1_expected_prev )
		&& ((R1_expected_prev !== last_R1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_expected_prev);
		$display ("     Real value = %b", R1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R1_exp = R1_expected_prev;
	end
	if (
		( R2_expected_prev !== 1'bx ) && ( R2_prev !== R2_expected_prev )
		&& ((R2_expected_prev !== last_R2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_expected_prev);
		$display ("     Real value = %b", R2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_R2_exp = R2_expected_prev;
	end
	if (
		( SEL_expected_prev[0] !== 1'bx ) && ( SEL_prev[0] !== SEL_expected_prev[0] )
		&& ((SEL_expected_prev[0] !== last_SEL_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEL_exp[0] = SEL_expected_prev[0];
	end
	if (
		( SEL_expected_prev[1] !== 1'bx ) && ( SEL_prev[1] !== SEL_expected_prev[1] )
		&& ((SEL_expected_prev[1] !== last_SEL_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEL_exp[1] = SEL_expected_prev[1];
	end
	if (
		( SEL_expected_prev[2] !== 1'bx ) && ( SEL_prev[2] !== SEL_expected_prev[2] )
		&& ((SEL_expected_prev[2] !== last_SEL_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SEL_exp[2] = SEL_expected_prev[2];
	end
	if (
		( Y1_expected_prev !== 1'bx ) && ( Y1_prev !== Y1_expected_prev )
		&& ((Y1_expected_prev !== last_Y1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y1_expected_prev);
		$display ("     Real value = %b", Y1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Y1_exp = Y1_expected_prev;
	end
	if (
		( Y2_expected_prev !== 1'bx ) && ( Y2_prev !== Y2_expected_prev )
		&& ((Y2_expected_prev !== last_Y2_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y2_expected_prev);
		$display ("     Real value = %b", Y2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y2_exp = Y2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module traffic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_1s;
reg clk_2s;
reg clk_ms;
reg RST;
// wires                                               
wire G1;
wire G2;
wire [7:0] LED8s;
wire [3:0] LED_display;
wire R1;
wire R2;
wire [2:0] SEL;
wire Y1;
wire Y2;

wire sampler;                             

// assign statements (if any)                          
traffic i1 (
// port map - connection between master ports and signals/registers   
	.clk_1s(clk_1s),
	.clk_2s(clk_2s),
	.clk_ms(clk_ms),
	.G1(G1),
	.G2(G2),
	.LED8s(LED8s),
	.LED_display(LED_display),
	.R1(R1),
	.R2(R2),
	.RST(RST),
	.SEL(SEL),
	.Y1(Y1),
	.Y2(Y2)
);

// RST
initial
begin
	RST = 1'b1;
end 

// clk_1s
always
begin
	clk_1s = 1'b0;
	clk_1s = #5000 1'b1;
	#5000;
end 

// clk_2s
always
begin
	clk_2s = 1'b0;
	clk_2s = #10000 1'b1;
	#10000;
end 

// clk_ms
always
begin
	clk_ms = 1'b0;
	clk_ms = #500 1'b1;
	#500;
end 

traffic_vlg_sample_tst tb_sample (
	.clk_1s(clk_1s),
	.clk_2s(clk_2s),
	.clk_ms(clk_ms),
	.RST(RST),
	.sampler_tx(sampler)
);

traffic_vlg_check_tst tb_out(
	.G1(G1),
	.G2(G2),
	.LED8s(LED8s),
	.LED_display(LED_display),
	.R1(R1),
	.R2(R2),
	.SEL(SEL),
	.Y1(Y1),
	.Y2(Y2),
	.sampler_rx(sampler)
);
endmodule

