// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2022 17:47:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    smg_display3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module smg_display3_vlg_sample_tst(
	CLK,
	sampler_tx
);
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module smg_display3_vlg_check_tst (
	CLK_1s,
	CLK_ms,
	LED8s,
	LED_num,
	SEL,
	sampler_rx
);
input  CLK_1s;
input  CLK_ms;
input [7:0] LED8s;
input [3:0] LED_num;
input [2:0] SEL;
input sampler_rx;

reg  CLK_1s_expected;
reg  CLK_ms_expected;
reg [7:0] LED8s_expected;
reg [3:0] LED_num_expected;
reg [2:0] SEL_expected;

reg  CLK_1s_prev;
reg  CLK_ms_prev;
reg [7:0] LED8s_prev;
reg [3:0] LED_num_prev;
reg [2:0] SEL_prev;

reg  CLK_1s_expected_prev;
reg  CLK_ms_expected_prev;
reg [7:0] LED8s_expected_prev;
reg [3:0] LED_num_expected_prev;
reg [2:0] SEL_expected_prev;

reg  last_CLK_1s_exp;
reg  last_CLK_ms_exp;
reg [7:0] last_LED8s_exp;
reg [3:0] last_LED_num_exp;
reg [2:0] last_SEL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	CLK_1s_prev = CLK_1s;
	CLK_ms_prev = CLK_ms;
	LED8s_prev = LED8s;
	LED_num_prev = LED_num;
	SEL_prev = SEL;
end

// update expected /o prevs

always @(trigger)
begin
	CLK_1s_expected_prev = CLK_1s_expected;
	CLK_ms_expected_prev = CLK_ms_expected;
	LED8s_expected_prev = LED8s_expected;
	LED_num_expected_prev = LED_num_expected;
	SEL_expected_prev = SEL_expected;
end



// expected CLK_1s
initial
begin
	CLK_1s_expected = 1'bX;
end 

// expected CLK_ms
initial
begin
	CLK_ms_expected = 1'bX;
end 
// expected LED8s[ 7 ]
initial
begin
	LED8s_expected[7] = 1'bX;
end 
// expected LED8s[ 6 ]
initial
begin
	LED8s_expected[6] = 1'bX;
end 
// expected LED8s[ 5 ]
initial
begin
	LED8s_expected[5] = 1'bX;
end 
// expected LED8s[ 4 ]
initial
begin
	LED8s_expected[4] = 1'bX;
end 
// expected LED8s[ 3 ]
initial
begin
	LED8s_expected[3] = 1'bX;
end 
// expected LED8s[ 2 ]
initial
begin
	LED8s_expected[2] = 1'bX;
end 
// expected LED8s[ 1 ]
initial
begin
	LED8s_expected[1] = 1'bX;
end 
// expected LED8s[ 0 ]
initial
begin
	LED8s_expected[0] = 1'bX;
end 
// expected LED_num[ 3 ]
initial
begin
	LED_num_expected[3] = 1'bX;
end 
// expected LED_num[ 2 ]
initial
begin
	LED_num_expected[2] = 1'bX;
end 
// expected LED_num[ 1 ]
initial
begin
	LED_num_expected[1] = 1'bX;
end 
// expected LED_num[ 0 ]
initial
begin
	LED_num_expected[0] = 1'bX;
end 
// expected SEL[ 2 ]
initial
begin
	SEL_expected[2] = 1'bX;
end 
// expected SEL[ 1 ]
initial
begin
	SEL_expected[1] = 1'bX;
end 
// expected SEL[ 0 ]
initial
begin
	SEL_expected[0] = 1'bX;
end 
// generate trigger
always @(CLK_1s_expected or CLK_1s or CLK_ms_expected or CLK_ms or LED8s_expected or LED8s or LED_num_expected or LED_num or SEL_expected or SEL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CLK_1s = %b | expected CLK_ms = %b | expected LED8s = %b | expected LED_num = %b | expected SEL = %b | ",CLK_1s_expected_prev,CLK_ms_expected_prev,LED8s_expected_prev,LED_num_expected_prev,SEL_expected_prev);
	$display("| real CLK_1s = %b | real CLK_ms = %b | real LED8s = %b | real LED_num = %b | real SEL = %b | ",CLK_1s_prev,CLK_ms_prev,LED8s_prev,LED_num_prev,SEL_prev);
`endif
	if (
		( CLK_1s_expected_prev !== 1'bx ) && ( CLK_1s_prev !== CLK_1s_expected_prev )
		&& ((CLK_1s_expected_prev !== last_CLK_1s_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK_1s :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK_1s_expected_prev);
		$display ("     Real value = %b", CLK_1s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLK_1s_exp = CLK_1s_expected_prev;
	end
	if (
		( CLK_ms_expected_prev !== 1'bx ) && ( CLK_ms_prev !== CLK_ms_expected_prev )
		&& ((CLK_ms_expected_prev !== last_CLK_ms_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLK_ms :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLK_ms_expected_prev);
		$display ("     Real value = %b", CLK_ms_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CLK_ms_exp = CLK_ms_expected_prev;
	end
	if (
		( LED8s_expected_prev[0] !== 1'bx ) && ( LED8s_prev[0] !== LED8s_expected_prev[0] )
		&& ((LED8s_expected_prev[0] !== last_LED8s_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[0] = LED8s_expected_prev[0];
	end
	if (
		( LED8s_expected_prev[1] !== 1'bx ) && ( LED8s_prev[1] !== LED8s_expected_prev[1] )
		&& ((LED8s_expected_prev[1] !== last_LED8s_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[1] = LED8s_expected_prev[1];
	end
	if (
		( LED8s_expected_prev[2] !== 1'bx ) && ( LED8s_prev[2] !== LED8s_expected_prev[2] )
		&& ((LED8s_expected_prev[2] !== last_LED8s_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[2] = LED8s_expected_prev[2];
	end
	if (
		( LED8s_expected_prev[3] !== 1'bx ) && ( LED8s_prev[3] !== LED8s_expected_prev[3] )
		&& ((LED8s_expected_prev[3] !== last_LED8s_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[3] = LED8s_expected_prev[3];
	end
	if (
		( LED8s_expected_prev[4] !== 1'bx ) && ( LED8s_prev[4] !== LED8s_expected_prev[4] )
		&& ((LED8s_expected_prev[4] !== last_LED8s_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[4] = LED8s_expected_prev[4];
	end
	if (
		( LED8s_expected_prev[5] !== 1'bx ) && ( LED8s_prev[5] !== LED8s_expected_prev[5] )
		&& ((LED8s_expected_prev[5] !== last_LED8s_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[5] = LED8s_expected_prev[5];
	end
	if (
		( LED8s_expected_prev[6] !== 1'bx ) && ( LED8s_prev[6] !== LED8s_expected_prev[6] )
		&& ((LED8s_expected_prev[6] !== last_LED8s_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[6] = LED8s_expected_prev[6];
	end
	if (
		( LED8s_expected_prev[7] !== 1'bx ) && ( LED8s_prev[7] !== LED8s_expected_prev[7] )
		&& ((LED8s_expected_prev[7] !== last_LED8s_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8s[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8s_expected_prev);
		$display ("     Real value = %b", LED8s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED8s_exp[7] = LED8s_expected_prev[7];
	end
	if (
		( LED_num_expected_prev[0] !== 1'bx ) && ( LED_num_prev[0] !== LED_num_expected_prev[0] )
		&& ((LED_num_expected_prev[0] !== last_LED_num_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_num_expected_prev);
		$display ("     Real value = %b", LED_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED_num_exp[0] = LED_num_expected_prev[0];
	end
	if (
		( LED_num_expected_prev[1] !== 1'bx ) && ( LED_num_prev[1] !== LED_num_expected_prev[1] )
		&& ((LED_num_expected_prev[1] !== last_LED_num_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_num_expected_prev);
		$display ("     Real value = %b", LED_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED_num_exp[1] = LED_num_expected_prev[1];
	end
	if (
		( LED_num_expected_prev[2] !== 1'bx ) && ( LED_num_prev[2] !== LED_num_expected_prev[2] )
		&& ((LED_num_expected_prev[2] !== last_LED_num_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_num_expected_prev);
		$display ("     Real value = %b", LED_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED_num_exp[2] = LED_num_expected_prev[2];
	end
	if (
		( LED_num_expected_prev[3] !== 1'bx ) && ( LED_num_prev[3] !== LED_num_expected_prev[3] )
		&& ((LED_num_expected_prev[3] !== last_LED_num_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_num_expected_prev);
		$display ("     Real value = %b", LED_num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED_num_exp[3] = LED_num_expected_prev[3];
	end
	if (
		( SEL_expected_prev[0] !== 1'bx ) && ( SEL_prev[0] !== SEL_expected_prev[0] )
		&& ((SEL_expected_prev[0] !== last_SEL_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEL_exp[0] = SEL_expected_prev[0];
	end
	if (
		( SEL_expected_prev[1] !== 1'bx ) && ( SEL_prev[1] !== SEL_expected_prev[1] )
		&& ((SEL_expected_prev[1] !== last_SEL_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEL_exp[1] = SEL_expected_prev[1];
	end
	if (
		( SEL_expected_prev[2] !== 1'bx ) && ( SEL_prev[2] !== SEL_expected_prev[2] )
		&& ((SEL_expected_prev[2] !== last_SEL_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_SEL_exp[2] = SEL_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module smg_display3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire CLK_1s;
wire CLK_ms;
wire [7:0] LED8s;
wire [3:0] LED_num;
wire [2:0] SEL;

wire sampler;                             

// assign statements (if any)                          
smg_display3 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLK_1s(CLK_1s),
	.CLK_ms(CLK_ms),
	.LED8s(LED8s),
	.LED_num(LED_num),
	.SEL(SEL)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #500 1'b1;
	#500;
end 

smg_display3_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.sampler_tx(sampler)
);

smg_display3_vlg_check_tst tb_out(
	.CLK_1s(CLK_1s),
	.CLK_ms(CLK_ms),
	.LED8s(LED8s),
	.LED_num(LED_num),
	.SEL(SEL),
	.sampler_rx(sampler)
);
endmodule

